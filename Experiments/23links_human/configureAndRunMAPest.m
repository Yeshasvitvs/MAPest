clc; close all; clear all;

rng(1); % Force the casual generator to be const
format long;

%% Add src to the path
addpath(genpath('src'));
addpath(genpath('analysisAndPlots'));
addpath(genpath('../../src'));
addpath(genpath('../../external'));

%% Preliminaries
% Create a structure 'bucket' where storing different stuff generated by
% running the code
bucket = struct;

%% Configure
% Root folder of the dataset
bucket.datasetRoot = fullfile(pwd, 'dataFloatingIWear');

% Subject and task to be processed
subjectID = 2;
taskID = 1;

%% Options
opts.analysis_48dofURDF = false;
opts.analysis_66dofURDF = true;

% Option for computing the estimated Sigma (default = FALSE)
opts.Sigma_dgiveny = false;

% Final plots
opts.finalPlot = false;

% Option for comparison fixed vs. floating
opts.fixedVSfloat = false;
opts.fixedVSfloat_iterative = false; % option for iterative testing.
% Every time the code is launched, .mat files in the fixed/floating
% processed folders are automatically deleted.

%% Covariances setting
priors = struct;
priors.acc_IMU     = 1e-6 * ones(3,1);                     %[m^2/s^2]   , from datasheet
% priors.gyro_IMU    = xxxxxx * ones(3,1);                 %[rad^2/s^2] , from datasheet
% priors.angAcc      = 1e6 * ones(3,1); %test
priors.ddq         = 6.66e-6;                              %[rad^2/s^4] , from worst case covariance
priors.foot_fext   = 1e-6 * [59; 59; 36; 2.25; 2.25; 0.56]; %[N^2,(Nm)^2]
priors.noSens_fext = 1e-6 * ones(6,1);

bucket.Sigmad = 1e6;
% low reliability on the estimation (i.e., no prior info on the model regularization term d)

bucket.SigmaD = 1e-4;
% high reliability on the model constraints

% for SOT in Task1
priors.fext_hands = 1e3 * ones(6,1);
priors.properDotL = 1e-4 * ones(6,1);

%% Run MAPest stack of task (SOT)
% =========================================================================
%  RUN TASK1
disp('=====================================================================');
disp('=====================================================================');
disp('[Start] Run SOT Task1..');
opts.task1_SOT = true;
opts.stackOfTaskMAP = true; % argument value for berdy functions for task1
main_floating;
disp('[End] Run SOT Task1');

%% Save the y_sim variable for task1 as y'_sim
assignin('base','y1_sim',y_sim)
save('y_sim.mat','y1_sim')

% plotMAPestDebug



% =========================================================================
%  RUN TASK2
disp('=====================================================================');
disp('=====================================================================');
disp('[Start] Run SOT Task2..');
opts.task1_SOT = false;
opts.stackOfTaskMAP = false; % argument value for berdy functions for task2
main_floating;
disp('[End] Run SOT Task2');
% plotMAPestDebug
